#include <iostream>

// 23:24 proto
int main(int argc, char argv)
{
  vector<int> vec = {12,17,1,3,7,9};  
  // 
  std::cout << vec;
  std::cout << slog2nfind(vec);
  return 0;
}


int simple_find(vector<int> & values, int value)
{
  for(int i=0;i<values.size();i++)
  {
    if(values[i]==value)
	return i;
  }
  return 0;
}

// 9 11 15 1 1 3 5 6 6 7 -> 4
// extend it a little, 
// analyze case, when:
// val[beg]>val[end]
//   val_seek > val[end]
//     seek in first half
//   val_seek < val[end]
//     seek in second half
// else     
//   it is sorted well, seek normal
// 
int slog2nfind(vector<int> & values, int value, int begin=0, 
	int end=values.size()-1)
{
  int cur_point = (end-begin) / 2;
  
  if(end==begin)
    return -1; // not found; or throw exception.
  else if(cur_point==begin && values[cur_point]!=values[end]) // rounding
    return -1;
  
  if(values[cur_point]==value)
  {
    return cur_point[];
  } else if( (values[cur_point]>value && values[begin] < values[end]) || 
	     (values[cur_point]<value && values[begin] > values[end]) )
  {
    // todo process
    int new_end = cur_point;
    return slog2nfind(values,value,begin,end);
  } else 
  {  
    // todo process
    int new_begin = cur_point;
    return slog2nfind(values, value, begin,end);
  }
}

